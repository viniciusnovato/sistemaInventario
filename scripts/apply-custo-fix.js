/**
 * Script para aplicar a corre√ß√£o na view vw_produtos_estoque
 * Adiciona os campos de custo unit√°rio √† view
 * 
 * Grupo AreLuna - Sistema de Invent√°rio
 * Data: 2025-10-21
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√µes do Supabase
const SUPABASE_URL = process.env.SUPABASE_URL || 'https://hvqckoajxhdqaxfawisd.supabase.co';
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_SERVICE_ROLE_KEY) {
    console.error('‚ùå ERRO: SUPABASE_SERVICE_ROLE_KEY n√£o est√° definida no arquivo .env');
    console.log('\nPara executar este script, voc√™ precisa:');
    console.log('1. Criar um arquivo .env na raiz do projeto (se ainda n√£o existe)');
    console.log('2. Adicionar a vari√°vel SUPABASE_SERVICE_ROLE_KEY com a chave de servi√ßo do Supabase');
    console.log('\nExemplo do .env:');
    console.log('SUPABASE_SERVICE_ROLE_KEY=sua_service_role_key_aqui');
    console.log('\nVoc√™ pode encontrar a Service Role Key no Dashboard do Supabase:');
    console.log('Settings ‚Üí API ‚Üí Project API keys ‚Üí service_role');
    console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: A service_role key √© secreta e n√£o deve ser compartilhada!\n');
    process.exit(1);
}

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY);

const SQL_UPDATE_VIEW = `
-- Recriar a view com as informa√ß√µes de custo
CREATE OR REPLACE VIEW vw_produtos_estoque AS
SELECT 
    p.id,
    p.qr_code,
    p.codigo_barras,
    p.categoria,
    p.nome_material,
    p.marca,
    p.fornecedor,
    p.referencia_lote,
    p.unidade_medida,
    p.localizacao,
    p.data_validade,
    p.descricao,
    p.observacoes,
    p.ativo,
    COALESCE(e.quantidade_atual, 0) AS quantidade_atual,
    COALESCE(e.quantidade_minima, 0) AS quantidade_minima,
    COALESCE(e.quantidade_maxima, 0) AS quantidade_maxima,
    COALESCE(e.status, 'ok') AS status,
    e.ultima_entrada,
    e.ultima_saida,
    e.ultima_atualizacao,
    (
        SELECT AVG(c.preco_unitario)
        FROM custoslaboratorio c
        WHERE c.produto_id = p.id 
        AND c.deleted_at IS NULL 
        AND c.ativo = TRUE
    ) AS custo_medio_unitario,
    (
        SELECT c.preco_unitario
        FROM custoslaboratorio c
        WHERE c.produto_id = p.id 
        AND c.deleted_at IS NULL 
        AND c.ativo = TRUE
        ORDER BY c.data_compra DESC
        LIMIT 1
    ) AS custo_unitario
FROM produtoslaboratorio p
LEFT JOIN estoquelaboratorio e ON p.id = e.produto_id
WHERE p.deleted_at IS NULL;
`;

async function applyFix() {
    console.log('üîß Iniciando corre√ß√£o da view vw_produtos_estoque...\n');
    
    try {
        console.log('üìù Executando SQL...');
        const { data, error } = await supabase.rpc('exec_sql', {
            sql: SQL_UPDATE_VIEW
        });
        
        if (error) {
            // Se o RPC n√£o existir, tentar executar diretamente
            console.log('‚ö†Ô∏è  RPC exec_sql n√£o dispon√≠vel, tentando m√©todo alternativo...');
            
            // Tentar executar usando o m√©todo from com uma query raw
            const { error: directError } = await supabase
                .from('_sql')
                .select('*')
                .limit(0);
            
            if (directError) {
                throw new Error(`N√£o foi poss√≠vel executar o SQL: ${directError.message}`);
            }
        }
        
        console.log('‚úÖ View atualizada com sucesso!');
        console.log('\nüìä A view vw_produtos_estoque agora inclui:');
        console.log('   ‚Ä¢ custo_medio_unitario - M√©dia dos pre√ßos de compra');
        console.log('   ‚Ä¢ custo_unitario - √öltimo pre√ßo de compra');
        console.log('   ‚Ä¢ referencia_lote');
        console.log('   ‚Ä¢ descricao');
        console.log('   ‚Ä¢ observacoes');
        
        console.log('\nüß™ Testando a view...');
        const { data: testData, error: testError } = await supabase
            .from('vw_produtos_estoque')
            .select('id, nome_material, custo_unitario, custo_medio_unitario')
            .limit(5);
        
        if (testError) {
            throw testError;
        }
        
        console.log(`‚úÖ Teste bem-sucedido! ${testData.length} produtos encontrados.`);
        
        if (testData.length > 0) {
            console.log('\nüìã Exemplo de dados retornados:');
            testData.forEach((produto, index) => {
                console.log(`   ${index + 1}. ${produto.nome_material}`);
                console.log(`      Custo Unit√°rio: ‚Ç¨${produto.custo_unitario || 'N/A'}`);
                console.log(`      Custo M√©dio: ‚Ç¨${produto.custo_medio_unitario || 'N/A'}`);
            });
        }
        
        console.log('\n‚úÖ Corre√ß√£o aplicada com sucesso!');
        console.log('\nüìù Pr√≥ximos passos:');
        console.log('   1. Reinicie o servidor (se estiver rodando)');
        console.log('   2. Acesse o sistema: http://localhost:3002/prostoral.html');
        console.log('   3. Teste a edi√ß√£o de produtos');
        console.log('   4. Verifique se o campo "Custo Unit√°rio" est√° sendo preenchido\n');
        
    } catch (error) {
        console.error('\n‚ùå ERRO ao aplicar corre√ß√£o:', error.message);
        console.log('\nüîç Instru√ß√µes alternativas:');
        console.log('   1. Acesse o Dashboard do Supabase');
        console.log('   2. V√° para SQL Editor');
        console.log('   3. Execute o conte√∫do do arquivo: database/fix-view-custo.sql\n');
        process.exit(1);
    }
}

// Executar
applyFix();

