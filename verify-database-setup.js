require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function verifyAndSetupDatabase() {
    console.log('üîç Verificando estrutura do banco de dados...\n');

    try {
        // 1. Verificar se a tabela modules existe
        console.log('1Ô∏è‚É£ Verificando tabela modules...');
        const { data: modules, error: modulesError } = await supabase
            .from('modules')
            .select('count')
            .limit(1);

        if (modulesError) {
            console.log('‚ùå Tabela modules n√£o encontrada ou erro:', modulesError.message);
            console.log('\nüìã A√á√ÉO NECESS√ÅRIA:');
            console.log('Execute o arquivo database/setup-modules.sql no seu banco de dados Supabase.');
            console.log('Voc√™ pode fazer isso atrav√©s do SQL Editor no painel do Supabase.\n');
            return false;
        }
        console.log('‚úÖ Tabela modules existe\n');

        // 2. Verificar se a tabela user_module_access existe
        console.log('2Ô∏è‚É£ Verificando tabela user_module_access...');
        const { data: userModuleAccess, error: userModuleAccessError } = await supabase
            .from('user_module_access')
            .select('count')
            .limit(1);

        if (userModuleAccessError) {
            console.log('‚ùå Tabela user_module_access n√£o encontrada:', userModuleAccessError.message);
            console.log('\nüìã A√á√ÉO NECESS√ÅRIA:');
            console.log('Execute o arquivo database/setup-modules.sql no seu banco de dados Supabase.\n');
            return false;
        }
        console.log('‚úÖ Tabela user_module_access existe\n');

        // 3. Verificar se a tabela role_module_access existe
        console.log('3Ô∏è‚É£ Verificando tabela role_module_access...');
        const { data: roleModuleAccess, error: roleModuleAccessError } = await supabase
            .from('role_module_access')
            .select('count')
            .limit(1);

        if (roleModuleAccessError) {
            console.log('‚ùå Tabela role_module_access n√£o encontrada:', roleModuleAccessError.message);
            console.log('\nüìã A√á√ÉO NECESS√ÅRIA:');
            console.log('Execute o arquivo database/setup-modules.sql no seu banco de dados Supabase.\n');
            return false;
        }
        console.log('‚úÖ Tabela role_module_access existe\n');

        // 4. Verificar se existem m√≥dulos cadastrados
        console.log('4Ô∏è‚É£ Verificando m√≥dulos cadastrados...');
        const { data: modulesList, error: modulesListError } = await supabase
            .from('modules')
            .select('*')
            .order('display_order');

        if (modulesListError) {
            console.log('‚ùå Erro ao buscar m√≥dulos:', modulesListError.message);
            return false;
        }

        if (!modulesList || modulesList.length === 0) {
            console.log('‚ö†Ô∏è  Nenhum m√≥dulo encontrado no banco de dados');
            console.log('\nüìã A√á√ÉO NECESS√ÅRIA:');
            console.log('Execute o arquivo database/setup-modules.sql para inserir os m√≥dulos padr√£o.\n');
            return false;
        }

        console.log(`‚úÖ ${modulesList.length} m√≥dulos encontrados:`);
        modulesList.forEach(module => {
            console.log(`   ${module.emoji} ${module.name} (${module.code})`);
        });
        console.log('');

        // 5. Verificar se a fun√ß√£o get_user_accessible_modules existe
        console.log('5Ô∏è‚É£ Testando fun√ß√£o get_user_accessible_modules...');
        
        // Pegar um usu√°rio de teste
        const { data: users, error: usersError } = await supabase.auth.admin.listUsers();
        
        if (usersError || !users || users.users.length === 0) {
            console.log('‚ö†Ô∏è  Nenhum usu√°rio encontrado para testar a fun√ß√£o');
        } else {
            const testUserId = users.users[0].id;
            const { data: testModules, error: functionError } = await supabase
                .rpc('get_user_accessible_modules', { p_user_id: testUserId });

            if (functionError) {
                console.log('‚ùå Fun√ß√£o get_user_accessible_modules n√£o encontrada ou erro:', functionError.message);
                console.log('\nüìã A√á√ÉO NECESS√ÅRIA:');
                console.log('Execute o arquivo database/setup-modules.sql para criar as fun√ß√µes SQL necess√°rias.\n');
                return false;
            }
            console.log('‚úÖ Fun√ß√£o get_user_accessible_modules est√° funcionando\n');
        }

        // 6. Verificar se a fun√ß√£o user_has_module_access existe
        console.log('6Ô∏è‚É£ Testando fun√ß√£o user_has_module_access...');
        
        if (users && users.users.length > 0) {
            const testUserId = users.users[0].id;
            const { data: hasAccess, error: functionError } = await supabase
                .rpc('user_has_module_access', { 
                    p_user_id: testUserId,
                    p_module_code: 'inventory'
                });

            if (functionError) {
                console.log('‚ùå Fun√ß√£o user_has_module_access n√£o encontrada ou erro:', functionError.message);
                console.log('\nüìã A√á√ÉO NECESS√ÅRIA:');
                console.log('Execute o arquivo database/setup-modules.sql para criar as fun√ß√µes SQL necess√°rias.\n');
                return false;
            }
            console.log('‚úÖ Fun√ß√£o user_has_module_access est√° funcionando\n');
        }

        // 7. Verificar se existem roles com acesso aos m√≥dulos
        console.log('7Ô∏è‚É£ Verificando acessos de roles aos m√≥dulos...');
        const { data: roleAccesses, error: roleAccessError } = await supabase
            .from('role_module_access')
            .select(`
                *,
                roles(name),
                modules(name, code)
            `)
            .limit(10);

        if (roleAccessError) {
            console.log('‚ö†Ô∏è  Erro ao verificar acessos de roles:', roleAccessError.message);
        } else if (!roleAccesses || roleAccesses.length === 0) {
            console.log('‚ö†Ô∏è  Nenhum acesso de role aos m√≥dulos configurado');
            console.log('\nüìã RECOMENDA√á√ÉO:');
            console.log('Configure os acessos das roles aos m√≥dulos atrav√©s do painel admin-modules.html');
            console.log('ou execute setup-admin.js para configurar acesso admin.\n');
        } else {
            console.log(`‚úÖ ${roleAccesses.length} acessos de roles configurados\n`);
        }

        console.log('‚úÖ ‚úÖ ‚úÖ BANCO DE DADOS CONFIGURADO CORRETAMENTE! ‚úÖ ‚úÖ ‚úÖ\n');
        console.log('üéâ Todas as tabelas e fun√ß√µes necess√°rias est√£o presentes.\n');
        
        return true;

    } catch (error) {
        console.error('üí• Erro inesperado:', error);
        return false;
    }
}

// Executar verifica√ß√£o
verifyAndSetupDatabase().then(success => {
    if (success) {
        console.log('‚úÖ Sistema pronto para uso!');
        process.exit(0);
    } else {
        console.log('\n‚ùå Configura√ß√£o incompleta. Siga as a√ß√µes necess√°rias acima.');
        console.log('\nüìö GUIA R√ÅPIDO:');
        console.log('1. Acesse o painel do Supabase (https://supabase.com)');
        console.log('2. V√° para SQL Editor');
        console.log('3. Copie e cole o conte√∫do de database/setup-modules.sql');
        console.log('4. Execute o SQL');
        console.log('5. Execute este script novamente para verificar\n');
        process.exit(1);
    }
});
