const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;
const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function checkSupabaseBackup() {
    console.log('üîç Verificando op√ß√µes de recupera√ß√£o no Supabase...');
    
    try {
        // 1. Verificar informa√ß√µes do projeto
        console.log('\nüìä Informa√ß√µes do projeto:');
        console.log(`üåê URL: ${supabaseUrl}`);
        console.log(`üîë Usando service role key`);
        
        // 2. Tentar acessar informa√ß√µes de backup via API administrativa
        console.log('\nüíæ Verificando backups dispon√≠veis...');
        
        // Extrair o ID do projeto da URL
        const projectId = supabaseUrl.match(/https:\/\/([^.]+)\.supabase\.co/)?.[1];
        console.log(`üìã Project ID: ${projectId}`);
        
        // 3. Verificar se existe alguma fun√ß√£o RPC para listar backups
        try {
            const { data: rpcFunctions, error: rpcError } = await supabase
                .rpc('pg_get_functiondef', { funcoid: 'backup_list' });
            
            if (!rpcError) {
                console.log('‚úÖ Fun√ß√£o de backup encontrada');
            }
        } catch (err) {
            console.log('‚ùå Nenhuma fun√ß√£o de backup personalizada encontrada');
        }
        
        // 4. Verificar logs do sistema (se dispon√≠vel)
        console.log('\nüìù Verificando logs do sistema...');
        
        try {
            // Tentar acessar logs via SQL
            const { data: logs, error: logsError } = await supabase
                .from('pg_stat_activity')
                .select('*')
                .limit(5);
            
            if (!logsError && logs) {
                console.log(`üìä Atividades do banco: ${logs.length} sess√µes ativas`);
            }
        } catch (err) {
            console.log('‚ö†Ô∏è  Logs do sistema n√£o acess√≠veis via API');
        }
        
        // 5. Verificar se existe algum snapshot ou backup manual
        console.log('\nüîÑ Verificando poss√≠veis snapshots...');
        
        // Tentar buscar em tabelas de sistema do PostgreSQL
        try {
            const { data: dbInfo, error: dbError } = await supabase
                .rpc('version');
            
            if (!dbError) {
                console.log('‚úÖ Conex√£o com PostgreSQL ativa');
                console.log(`üìä Vers√£o: ${dbInfo}`);
            }
        } catch (err) {
            console.log('‚ö†Ô∏è  Informa√ß√µes do banco n√£o acess√≠veis');
        }
        
        // 6. Instru√ß√µes detalhadas para recupera√ß√£o
        console.log('\n' + '='.repeat(60));
        console.log('üö® SITUA√á√ÉO CR√çTICA - ITENS ORIGINAIS PERDIDOS');
        console.log('='.repeat(60));
        console.log('‚ùå Foram removidos 16 itens originais do Instituto Areluna');
        console.log('‚è∞ A√ß√£o imediata necess√°ria para recupera√ß√£o');
        
        console.log('\nüîÑ OP√á√ïES DE RECUPERA√á√ÉO IMEDIATA:');
        console.log('='.repeat(60));
        
        console.log('\n1. üè• RECUPERA√á√ÉO VIA SUPABASE DASHBOARD:');
        console.log('   ‚Ä¢ Acesse: https://supabase.com/dashboard/project/' + projectId);
        console.log('   ‚Ä¢ V√° para Settings > Database');
        console.log('   ‚Ä¢ Procure por "Point-in-time Recovery" ou "Backups"');
        console.log('   ‚Ä¢ Restaure para antes da primeira importa√ß√£o CSV');
        
        console.log('\n2. üìû CONTATO COM SUPORTE SUPABASE:');
        console.log('   ‚Ä¢ Email: support@supabase.com');
        console.log('   ‚Ä¢ Dashboard: https://supabase.com/dashboard/support');
        console.log('   ‚Ä¢ Mencione: "Need point-in-time recovery"');
        console.log('   ‚Ä¢ Project ID: ' + projectId);
        
        console.log('\n3. üîß RECUPERA√á√ÉO MANUAL (se backup n√£o dispon√≠vel):');
        console.log('   ‚Ä¢ Recriar os 16 itens manualmente');
        console.log('   ‚Ä¢ Usar dados de backup local se dispon√≠vel');
        console.log('   ‚Ä¢ Importar de planilha externa');
        
        console.log('\n‚ö†Ô∏è  INFORMA√á√ïES IMPORTANTES:');
        console.log('='.repeat(60));
        console.log('‚Ä¢ üïê Supabase mant√©m backups por 7 dias (plano gratuito)');
        console.log('‚Ä¢ üìÖ Planos pagos t√™m reten√ß√£o maior');
        console.log('‚Ä¢ ‚ö° Quanto mais r√°pido agir, maior chance de recupera√ß√£o');
        console.log('‚Ä¢ üíæ Point-in-time recovery pode estar dispon√≠vel');
        
        console.log('\nüìã PR√ìXIMOS PASSOS RECOMENDADOS:');
        console.log('='.repeat(60));
        console.log('1. ‚úÖ Acesse o dashboard do Supabase IMEDIATAMENTE');
        console.log('2. ‚úÖ Procure por op√ß√µes de backup/recovery');
        console.log('3. ‚úÖ Se n√£o encontrar, contacte o suporte');
        console.log('4. ‚úÖ Forne√ßa o timestamp aproximado antes da importa√ß√£o');
        console.log('5. ‚úÖ Mencione que precisa recuperar 16 itens espec√≠ficos');
        
        console.log('\nüéØ TIMESTAMP APROXIMADO DA PERDA:');
        console.log('   Antes da primeira importa√ß√£o CSV (hoje)');
        console.log('   Procure por backup de ontem ou in√≠cio de hoje');
        
    } catch (err) {
        console.error('‚ùå Erro durante verifica√ß√£o:', err);
    }
}

// Executar verifica√ß√£o
if (require.main === module) {
    checkSupabaseBackup().catch(console.error);
}

module.exports = { checkSupabaseBackup };